import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @authors
 * José Manuel Alvarez García - CI 25038805
 * José Gregorio Castro Lazo - CI 24635907
 */

public class Interface extends javax.swing.JFrame {
    
    Image bitmapImage = null; 
    Image imgAux = null;
    Image undoImage = null; 
    Image redoImage = null; 
    Image originalImage = null;
    JFileChooser browsedFile = new JFileChooser();
    int degrees = 0; 
    int lastDegrees = 0;
    int d = 0;
    boolean rotated = false;
    boolean lastRotated = false;
    JLabel label = new JLabel("",SwingConstants.CENTER);
    double[][] customKernel = null;

    public Interface() {
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
        this.setLocationRelativeTo(null);
        jComboBox1.setLightWeightPopupEnabled(false);
        jSlider1.setVisible(false);
        jLabel2.setVisible(false);
        botonGuardar.setEnabled(false);
        botonInfo.setEnabled(false);
        originalButton.setEnabled(false);
        botonOperar.setEnabled(false);          
        undo.setEnabled(false);    
        redo.setEnabled(false);    
    }
         
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        custom = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        factor = new javax.swing.JTextField();
        apply = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        kernel = new javax.swing.JTable();
        botonCargarImagen = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        botonGuardar = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        botonOperar = new javax.swing.JButton();
        jScrollPane1 = new java.awt.ScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        redPane = new javax.swing.JTabbedPane();
        greenPane = new javax.swing.JTabbedPane();
        bluePane = new javax.swing.JTabbedPane();
        grayPane = new javax.swing.JTabbedPane();
        botonInfo = new javax.swing.JButton();
        originalButton = new javax.swing.JButton();
        undo = new javax.swing.JButton();
        redo = new javax.swing.JButton();

        custom.setTitle("Kernel Personalizado");
        custom.setMinimumSize(new java.awt.Dimension(400, 300));

        jLabel4.setText("Divisor");

        factor.setText("1.0");
        factor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factorActionPerformed(evt);
            }
        });

        apply.setText("Aplicar");
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });

        kernel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "O", "P"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(kernel);

        javax.swing.GroupLayout customLayout = new javax.swing.GroupLayout(custom.getContentPane());
        custom.getContentPane().setLayout(customLayout);
        customLayout.setHorizontalGroup(
            customLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(factor, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(apply)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        customLayout.setVerticalGroup(
            customLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(factor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tarea  #3 - José Alvarez - José Castro");
        setMaximumSize(new java.awt.Dimension(1280, 740));
        setPreferredSize(new java.awt.Dimension(1280, 740));
        setResizable(false);

        botonCargarImagen.setText("Cargar Imagen");
        botonCargarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarImagenActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Negativo", "Espejo Horizontal", "Espejo Vertical", "Brillo", "Contraste", "Umbralizar", "Rotar", "Ecualizar", "Escalamiento", "Zoom", "Box Blur", "Blur Gaussiano", "Perfilado", "Prewitt", "Sobel", "Kernel Personalizado" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        botonGuardar.setText("Guardar Imagen");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        jSlider1.setMajorTickSpacing(30);
        jSlider1.setMaximum(255);
        jSlider1.setMinimum(-255);
        jSlider1.setMinorTickSpacing(30);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setToolTipText("");
        jSlider1.setValue(0);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        botonOperar.setText("Operar");
        botonOperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOperarActionPerformed(evt);
            }
        });

        jTabbedPane1.addTab("Rojo", redPane);
        jTabbedPane1.addTab("Verde", greenPane);
        jTabbedPane1.addTab("Azul", bluePane);
        jTabbedPane1.addTab("Gris", grayPane);

        botonInfo.setText("Info");
        botonInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInfoActionPerformed(evt);
            }
        });

        originalButton.setText("Volver a la original");
        originalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originalButtonActionPerformed(evt);
            }
        });

        undo.setText("Deshacer");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });

        redo.setText("Rehacer");
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonOperar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(originalButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(undo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonCargarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(botonOperar)
                                .addComponent(botonGuardar)
                                .addComponent(botonInfo)
                                .addComponent(originalButton)
                                .addComponent(undo)
                                .addComponent(redo)))
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonCargarImagen)
                        .addGap(4, 4, 4)))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCargarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarImagenActionPerformed
        //Se carga la imagen examinándola desde un directorio
        bitmapImage = null;
        browsedFile.showOpenDialog(this);
        File file = browsedFile.getSelectedFile();    
        if (file != null) {
            String pathImageFile = file.getAbsolutePath();  
            try {           
                bitmapImage = processImage.loadImage(pathImageFile,label);
            } catch (FileNotFoundException ex) {}
            if (bitmapImage == null) {
                //Si la imagen cargada es corrupta o si se cargo algún otro archivo que no sea un bitmap de 1, 4, 8, 16 o 24 bits, se muestra un mensaje de error y los botones no pueden ser seleccionados
                jSlider1.setVisible(false);
                jLabel2.setVisible(false);
                botonGuardar.setEnabled(false);
                botonInfo.setEnabled(false);
                originalButton.setEnabled(false);
                botonOperar.setEnabled(false);
                label.setVisible(false);           
            } else {   
                //En caso contrario, se muestra la imagen y se activan los botones         
                degrees = 0;
                rotated = false;
                label.setIcon(new ImageIcon(bitmapImage));        
                label.setVisible(true);
                jScrollPane1.add(label); 
                botonGuardar.setEnabled(true);
                botonInfo.setEnabled(true);
                originalButton.setEnabled(true);
                botonOperar.setEnabled(true);
                undo.setEnabled(false);    
                redo.setEnabled(false);
                imgAux = bitmapImage;                
            }
            if (bitmapImage != null) {
                originalImage = bitmapImage;
                BufferedImage image = processImage.toBufferedImage(originalImage); 
                //Se calcula la diagonal a la imagen original
                d = (int) Math.ceil(Math.sqrt(Math.pow(image.getWidth(),2)+Math.pow(image.getHeight(),2)));
                crearHistograma(bitmapImage);
            }         
        }
        
    }//GEN-LAST:event_botonCargarImagenActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        int saveValue = browsedFile.showSaveDialog(null);
        BufferedImage aux = null;
        if (!rotated) aux = processImage.toBufferedImage(bitmapImage);
        else aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
        Image image = aux.getScaledInstance(aux.getWidth(), aux.getHeight(), Image.SCALE_SMOOTH);
        BufferedImage buffered = new BufferedImage(aux.getWidth(), aux.getHeight(), BufferedImage.TYPE_INT_RGB);
        buffered.getGraphics().drawImage(image, 0, 0 , null);
        if (saveValue == JFileChooser.APPROVE_OPTION) {
            try {
                ImageIO.write(buffered, "bmp", new File(browsedFile.getSelectedFile().getAbsolutePath()));
            } catch (IOException ex) {}
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        jLabel2.setText(""+jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        int opcion = jComboBox1.getSelectedIndex();
        switch (opcion)
        {
            case 0: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
                    botonOperar.setText("Operar");                
            break;
                
            case 1: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
                    botonOperar.setText("Operar");
            break;
                    
            case 2: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
                    botonOperar.setText("Operar");
            break;
                
            case 5: jSlider1.setMinimum(0);
                    jSlider1.setMaximum(255);
                    jSlider1.setMinorTickSpacing(30);
                    jSlider1.setSnapToTicks(false);
                    jSlider1.setValue(0);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;
            
            case 6: jSlider1.setMinimum(-360);
                    jSlider1.setMaximum(360);                    
                    jSlider1.setMinorTickSpacing(30);
                    jSlider1.setSnapToTicks(false);
                    jSlider1.setValue(0);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;            
            
            case 7: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
                    botonOperar.setText("Operar");
            break;   
                
            case 8: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
                    botonOperar.setText("Operar");
            break;
            
            case 9: jSlider1.setMinimum(1);
                    jSlider1.setMaximum(300);                    
                    jSlider1.setMinorTickSpacing(30);
                    jSlider1.setSnapToTicks(false);
                    jSlider1.setValue(100);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
                    
            break;           
       
            case 10: jSlider1.setMinimum(3);
                    jSlider1.setMaximum(15);
                    jSlider1.setValue(3);
                    jSlider1.setMinorTickSpacing(2);
                    jSlider1.setSnapToTicks(true);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;
            
            case 11: jSlider1.setMinimum(3);
                    jSlider1.setMaximum(15);
                    jSlider1.setValue(3);
                    jSlider1.setMinorTickSpacing(2);
                    jSlider1.setSnapToTicks(true);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;
            
            case 12: jSlider1.setMinimum(3);
                    jSlider1.setMaximum(15);
                    jSlider1.setValue(3);
                    jSlider1.setMinorTickSpacing(2);
                    jSlider1.setSnapToTicks(true);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;

            case 13: jSlider1.setMinimum(3);
                    jSlider1.setMaximum(15);
                    jSlider1.setValue(3);
                    jSlider1.setMinorTickSpacing(2);
                    jSlider1.setSnapToTicks(true);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;
            
            case 14: jSlider1.setMinimum(3);
                    jSlider1.setMaximum(15);
                    jSlider1.setValue(3);
                    jSlider1.setMinorTickSpacing(2);
                    jSlider1.setSnapToTicks(true);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;
            
            case 15: jSlider1.setMinimum(3);
                    jSlider1.setMaximum(15);
                    jSlider1.setValue(3);
                    jSlider1.setMinorTickSpacing(2);
                    jSlider1.setSnapToTicks(true);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Ingresar");
            break;
            
            default: jSlider1.setMinimum(-255);
                    jSlider1.setMaximum(255);
                    jSlider1.setValue(0);
                    jSlider1.setMinorTickSpacing(30);
                    jSlider1.setSnapToTicks(false);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    botonOperar.setText("Operar");
            break;
                
        }
           
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void botonOperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOperarActionPerformed
        int opcion = jComboBox1.getSelectedIndex();
        switch (opcion)
        {
            case 0: //Negativo
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {                        
                        bitmapImage = processImage.invertImage(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label); 
                    } else {
                        imgAux = processImage.invertImage(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                    
                }
            break;
                
            case 1: //Espejo Horizontal
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        bitmapImage = processImage.horizontalFlip(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.horizontalFlip(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 2: //Espejo Vertical
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        bitmapImage = processImage.verticalFlip(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.verticalFlip(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 3: //Brillo
                if (bitmapImage != null) {  
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        try {
                            bitmapImage = processImage.brightness(processImage.toBufferedImage(imgAux), jSlider1.getValue());
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        try {
                            imgAux = processImage.brightness(processImage.toBufferedImage(imgAux), jSlider1.getValue());
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }  
            break;
                
            case 4: //Contraste
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        bitmapImage = processImage.contrast(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.contrast(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 5:
                if (bitmapImage != null) {  //Umbralización
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        bitmapImage = processImage.umbralize(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.umbralize(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 6: //Rotación
                if (bitmapImage != null) {
                    rotated = true;
                    lastRotated = true;
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    lastDegrees = jSlider1.getValue(); 
                    degrees += jSlider1.getValue(); 
                    if (degrees >= 360) degrees -= 360;
                    if (degrees <= -360) degrees += 360;
                    bitmapImage = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                    label.setIcon(new ImageIcon(bitmapImage));                    
                    jScrollPane1.add(label); 
                    crearHistograma(imgAux);
                }
            break;
            
            case 7: //Ecualización
                if (bitmapImage != null) { 
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        bitmapImage = processImage.histogramEqualization(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);                        
                        int [][] histMatrix = DibujarHistograma.histograma(processImage.toBufferedImage(bitmapImage));
                        try {
                            DibujarHistograma.crearHistograma(histMatrix[0], redPane, Color.RED);
                            DibujarHistograma.crearHistograma(histMatrix[1], greenPane, Color.GREEN);
                            DibujarHistograma.crearHistograma(histMatrix[2], bluePane, Color.BLUE);
                            DibujarHistograma.crearHistograma(histMatrix[4], grayPane, Color.BLACK);
                        } catch (IOException ex) {
                        }
                    } else {
                        imgAux = processImage.histogramEqualization(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);     
                        int [][] histMatrix = DibujarHistograma.histograma(processImage.toBufferedImage(imgAux));
                        try {
                            DibujarHistograma.crearHistograma(histMatrix[0], redPane, Color.RED);
                            DibujarHistograma.crearHistograma(histMatrix[1], greenPane, Color.GREEN);
                            DibujarHistograma.crearHistograma(histMatrix[2], bluePane, Color.BLUE);
                            DibujarHistograma.crearHistograma(histMatrix[4], grayPane, Color.BLACK);
                        } catch (IOException ex) {
                        }
                    }
                }
            break;

            case 8: //Escalamiento
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    try {
                        int ancho = Integer.parseInt(JOptionPane.showInputDialog(null,"Introduzca el ancho: ","Ancho",JOptionPane.DEFAULT_OPTION));
                        int alto = Integer.parseInt(JOptionPane.showInputDialog(null,"Introduzca el alto: ","Alto",JOptionPane.DEFAULT_OPTION));
                        BufferedImage aux = processImage.toBufferedImage(bitmapImage);
                        int M = aux.getWidth();
                        int N = aux.getHeight();
                        int[] pixels = new int[N*M];
                        int indice = 0;
                        for (int i=0;i<N;i++) {
                            for (int j=0;j<M;j++) {
                                pixels[indice] = aux.getRGB(j, i);
                                indice++;
                            }
                        }
                        int[] res = processImage.escalamiento(pixels,M,N,ancho,alto,false);
                        d = (int) Math.ceil(Math.sqrt(Math.pow(ancho,2)+Math.pow(alto,2)));
                        BufferedImage salida = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_RGB);
                        indice = 0;
                        for (int i=0;i<alto;i++) {
                            for (int j=0;j<ancho;j++) {
                                salida.setRGB(j, i, res[indice]);
                                indice++;
                            }
                        } 
                        bitmapImage = salida;
                        if (!rotated) imgAux = bitmapImage;
                        else {
                            aux = processImage.toBufferedImage(imgAux);
                            M = aux.getWidth();
                            N = aux.getHeight();
                            pixels = new int[N*M];
                            indice = 0;
                            for (int i=0;i<N;i++) {
                               for (int j=0;j<M;j++) {
                                   pixels[indice] = aux.getRGB(j, i);
                                   indice++;
                               }
                            }
                            res = processImage.escalamiento(pixels,M,N,ancho,alto,false);
                            d = (int) Math.ceil(Math.sqrt(Math.pow(ancho,2)+Math.pow(alto,2)));
                            salida = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_RGB);
                            indice = 0;
                            for (int i=0;i<alto;i++) {
                               for (int j=0;j<ancho;j++) {
                                   salida.setRGB(j, i, res[indice]);
                                   indice++;
                               }
                            }
                            imgAux = salida;
                            bitmapImage = processImage.rotate(processImage.toBufferedImage(salida), degrees, d);
                        }
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);
                        if (!rotated) crearHistograma(bitmapImage);
                        else crearHistograma(imgAux);
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(null, "Error: Datos Inválidos","Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            break;
                
            case 9:     //Zoom
                if (bitmapImage != null) {
                    BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                    int M = aux.getWidth();
                    int N = aux.getHeight();
                    int[] pixels = new int[N*M];
                    int indice = 0;
                    for (int i=0;i<N;i++) {
                        for (int j=0;j<M;j++) {
                            pixels[indice] = aux.getRGB(j, i);
                            indice++;
                        }
                    }                  
                    int N2 = N*jSlider1.getValue()/100;
                    int M2 = M*jSlider1.getValue()/100;
                    int[] res = processImage.escalamiento(pixels,M,N,M2,N2,true);
                    if (N2 <= 1 || M2 <= 1) N2 = M2 = 1; 
                    BufferedImage salida = new BufferedImage(M2, N2, BufferedImage.TYPE_INT_RGB);
                    indice = 0;
                    for (int i=0;i<N2;i++) {
                        for (int j=0;j<M2;j++) {
                            salida.setRGB(j, i, res[indice]);
                            indice++;
                        }
                    }
                    label.setIcon(new ImageIcon(salida));
                    jScrollPane1.add(label);                    
                }
            break; 
            
            case 10:    //Suavizado de la media
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    int size = jSlider1.getValue();
                    double[][] kernel = new double[size][size];
                    for (int i=0; i<size; i++)
                        for (int j=0; j<size; j++)
                            kernel[i][j] = 1; 
                    double factor = 1.0/(double)(size*size);
                    if (!rotated) {
                        bitmapImage = processImage.convolve(processImage.toBufferedImage(imgAux),kernel,factor);
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.convolve(processImage.toBufferedImage(imgAux),kernel,factor);
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;   
                        
            case 11:    //Suavizado Gaussiano
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    int size = jSlider1.getValue();
                    double[][] kernel = processImage.crearKernel(size);
                    double factor = 0.0;
                    for (int i=0; i<size; i++)
                        for (int j=0; j<size; j++)
                            factor += kernel[i][j];
                    factor = 1.0/factor;
                    if (!rotated) {
                        bitmapImage = processImage.convolve(processImage.toBufferedImage(imgAux),kernel,factor);
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.convolve(processImage.toBufferedImage(imgAux),kernel,factor);
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
            
            case 12:    //Perfilado
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    int size = jSlider1.getValue();
                    double[][] kernel = processImage.crearKernelSharpen(size);
                    double factor = 1.0;
                    if (!rotated) {
                        bitmapImage = processImage.convolve(processImage.toBufferedImage(imgAux),kernel,factor);
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.convolve(processImage.toBufferedImage(imgAux),kernel,factor);
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;  
            
            case 13:    //Prewitt
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        bitmapImage = processImage.convolveEdges(processImage.grayScale(processImage.toBufferedImage(imgAux)),jSlider1.getValue(),1);
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.convolveEdges(processImage.grayScale(processImage.toBufferedImage(imgAux)),jSlider1.getValue(),1);
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break; 
            
            case 14:    //Sobel
                if (bitmapImage != null) {
                    lastRotated = false;
                    undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                    undo.setEnabled(true);    
                    redo.setEnabled(false);
                    if (!rotated) {
                        bitmapImage = processImage.convolveEdges(processImage.grayScale(processImage.toBufferedImage(imgAux)),jSlider1.getValue(),2);
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.convolveEdges(processImage.grayScale(processImage.toBufferedImage(imgAux)),jSlider1.getValue(),2);
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break; 
            
            case 15:    //Custom Kernel
                if (bitmapImage != null) {
                    lastRotated = false;                    
                    int size = jSlider1.getValue();
                    custom.setVisible(true);
                    custom.setLocationRelativeTo(null);
                    int n = size;
                    double matrizKernel[][] = new double[n][n];
                    int mid = (int)Math.floor(n/2);
                    matrizKernel[mid][mid] = 1;
                    mostrarMatriz(matrizKernel, n); 
                }
            break; 
            
        }             
    }//GEN-LAST:event_botonOperarActionPerformed
    
    private void botonInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInfoActionPerformed
        processImage.mostrarInfo();
    }//GEN-LAST:event_botonInfoActionPerformed

    private void originalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originalButtonActionPerformed
        bitmapImage = originalImage;
        imgAux = originalImage;
        BufferedImage image = processImage.toBufferedImage(originalImage); 
        //Se calcula la diagonal a la imagen original
        d = (int) Math.ceil(Math.sqrt(Math.pow(image.getWidth(),2)+Math.pow(image.getHeight(),2)));
        rotated = false;
        processImage.setHeight(processImage.toBufferedImage(originalImage).getHeight() );
        processImage.setWidth(processImage.toBufferedImage(originalImage).getWidth() );
        label.setIcon(new ImageIcon(originalImage));
        jScrollPane1.add(label); 
        degrees = 0;
        crearHistograma(bitmapImage);
        undo.setEnabled(false);
        redo.setEnabled(false);
    }//GEN-LAST:event_originalButtonActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        redoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
        bitmapImage = processImage.copyImage(processImage.toBufferedImage(undoImage));
        if (lastRotated) {
            degrees -= lastDegrees;
        }
        imgAux = bitmapImage;
        bitmapImage = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
        undo.setEnabled(false);
        redo.setEnabled(true);
        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
        crearHistograma(imgAux);
        label.setIcon(new ImageIcon(aux));
        jScrollPane1.add(label);         
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
        bitmapImage = processImage.copyImage(processImage.toBufferedImage(redoImage));
        if (lastRotated) {
            degrees += lastDegrees;
        }
        imgAux = bitmapImage;
        bitmapImage = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
        undo.setEnabled(true);
        redo.setEnabled(false);
        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
        crearHistograma(imgAux);
        label.setIcon(new ImageIcon(aux));
        jScrollPane1.add(label);   
    }//GEN-LAST:event_redoActionPerformed

    private void factorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_factorActionPerformed

    private void applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyActionPerformed
        boolean error = false;
        try {
            double factor = Double.parseDouble(this.factor.getText());
        } catch (NumberFormatException ignore) {
            JOptionPane.showMessageDialog(null, "Error: Datos Inválidos","Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        if (!error) { 
            try {
                double factor = Double.parseDouble(this.factor.getText());
                factor = 1.0/factor;
                custom.setVisible(false);
                customKernel = getMatrix();
                undoImage = processImage.copyImage(processImage.toBufferedImage(imgAux));
                undo.setEnabled(true);    
                redo.setEnabled(false);
                if (!rotated) {
                    bitmapImage = processImage.convolve(processImage.toBufferedImage(imgAux),customKernel,factor);
                    imgAux = bitmapImage;
                    crearHistograma(bitmapImage);
                    label.setIcon(new ImageIcon(bitmapImage));
                    jScrollPane1.add(label);   
                } else {
                    imgAux = processImage.convolve(processImage.toBufferedImage(imgAux),customKernel,factor);
                    BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                    crearHistograma(imgAux);
                    label.setIcon(new ImageIcon(aux));
                    jScrollPane1.add(label);                        
                } 
            } catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error: Datos Inválidos","Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_applyActionPerformed

    public void mostrarMatriz(double[][] matrizKernel, int n) {
        DefaultTableModel model = (DefaultTableModel)kernel.getModel();
        model.setColumnCount(n);
        model.setRowCount(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                kernel.setValueAt(matrizKernel[i][j], i, j);
            }
        }
    }
    
    public double[][] getMatrix() {
        DefaultTableModel model = (DefaultTableModel)kernel.getModel();
        int n = model.getColumnCount();
        double[][] matrizKernel = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrizKernel[i][j] = (double) kernel.getValueAt(i,j);
            }
        }
        return matrizKernel;
    }
    
    public void crearHistograma(Image I) 
    {
        int [][] histMatrix = DibujarHistograma.histograma(processImage.toBufferedImage(I));
        try {
            DibujarHistograma.crearHistograma(histMatrix[0], redPane, Color.RED);
            DibujarHistograma.crearHistograma(histMatrix[1], greenPane, Color.GREEN);
            DibujarHistograma.crearHistograma(histMatrix[2], bluePane, Color.BLUE);
            DibujarHistograma.crearHistograma(histMatrix[4], grayPane, Color.BLACK);
        } catch (IOException ex) {}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply;
    private javax.swing.JTabbedPane bluePane;
    private javax.swing.JButton botonCargarImagen;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonInfo;
    private javax.swing.JButton botonOperar;
    private javax.swing.JDialog custom;
    private javax.swing.JTextField factor;
    private javax.swing.JTabbedPane grayPane;
    private javax.swing.JTabbedPane greenPane;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    public java.awt.ScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable kernel;
    private javax.swing.JButton originalButton;
    private javax.swing.JTabbedPane redPane;
    private javax.swing.JButton redo;
    private javax.swing.JButton undo;
    // End of variables declaration//GEN-END:variables
}
